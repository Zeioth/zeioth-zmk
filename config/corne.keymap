// Copyright (c) 2022 Zeioth (Adrian Lopez)
// License: Creative Commons 3.0


/* PERSONAL NOTES: 
 1. On vim you can enable C syntax for this file:
    :set syntax=perl 
 2.Keep only 1 space before the comments, or it will fail to compile.
*/


// Includes
// ---------------------------------------
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "../zmk-nodefree-config/helper.h"

// Layers
// ---------------------------------------
#define DEFAULT 0
#define SUPER   1
#define LOWER   2
#define RAISE   3
#define HYPER   4
#define ARROW   5
#define CONFIG  6
#define NONE    0


// BASE LAYER MACROS 
// -----------------------------------------------------------------------
// CTRL+BACKSPACE
ZMK_BEHAVIOR(CKC_CTRLBS, macro, bindings = <&kp LC(BSPC)>;)
// BACKSPACE AND DEL
ZMK_BEHAVIOR(CKC_BSPC, mod_morph, 
  bindings = <&kp BSPC>, <&kp DEL>;
  mods = <(MOD_LSFT|MOD_RSFT)>;)
// Enables ARROW MODE when pressed during LSHIFT.
ZMK_BEHAVIOR(CKC_RSFT, mod_morph,
  bindings = <&kp RSHFT>, <&mo 5>;
  mods = <(MOD_LSFT)>;
)

// SUPER LAYER MACROS 
// -----------------------------------------------------------------------
// WORKSPACE 1
ZMK_BEHAVIOR(M_WS1, macro, bindings = <&kp LGUI>, <&kp N1>;)
// WORKSPACE 2
ZMK_BEHAVIOR(M_WS2, macro, bindings = <&kp LGUI>, <&kp N2>;)
// WORKSPACE 3
ZMK_BEHAVIOR(M_WS3, macro, bindings = <&kp LGUI>, <&kp N3>;)
// WORKSPACE 4
ZMK_BEHAVIOR(M_WS4, macro, bindings = <&kp LGUI>, <&kp N4>;)
// WORKSPACE 5
ZMK_BEHAVIOR(M_WS5, macro, bindings = <&kp LGUI>, <&kp N5>;)
// WORKSPACE 6
ZMK_BEHAVIOR(M_WS6, macro, bindings = <&kp LGUI>, <&kp N6>;)
// WORKSPACE 7
ZMK_BEHAVIOR(M_WS7, macro, bindings = <&kp LGUI>, <&kp N7>;)
// WORKSPACE 8
ZMK_BEHAVIOR(M_WS8, macro, bindings = <&kp LGUI>, <&kp N8>;)
// LOCK SESSION
ZMK_BEHAVIOR(M_LOCK, macro, bindings = <&kp LS(LG(L))>;)
// POWER MENU
ZMK_BEHAVIOR(M_PWMENU, macro, bindings = <&kp LS(LG(E))>;)
// SHOW KEYBOARD HELP
ZMK_BEHAVIOR(M_HELP, macro, bindings = <&kp LS(LG(H))>;)
// SHOW VIM HELP
ZMK_BEHAVIOR(M_VIM_HELP, macro, bindings = <&kp LS(LG(V))>;)
// I3 FULL SCREEN
ZMK_BEHAVIOR(I3_FS, macro, bindings = <&kp LG(F)>;)
// I3 DISPLAY MODE
ZMK_BEHAVIOR(I3_DISPLAYS, macro, bindings = <&kp LS(LG(D))>;)
// I3 SCREENSHOT MODE
ZMK_BEHAVIOR(I3_SCREENSHOT, macro, bindings = <&kp LS(LG(S))>;)
// I3 RESIZE MODE
ZMK_BEHAVIOR(I3_RESIZE, macro, bindings = <&kp LS(LG(R))>;)
// I3 MOVE MODE
ZMK_BEHAVIOR(I3_MOVE, macro, bindings = <&kp LS(LG(A))>;)
// I3 SCRATCHPAD (TODO: ES_MINS NO EXISTE ASIQUE AVERIGUA LA TECLA)
ZMK_BEHAVIOR(I3_SPAD, macro, bindings = <&kp LS(LG(S))>;)

/ { // START KEYBOARD


  // START KEYMAPS
  // ##########################################################################
  keymap { 
    compatible = "zmk,keymap";

    // ############################################################  DEFAULT ########################################################################
    default_layer { bindings = <
       &kp TAB   &kp Q &kp D &kp R &kp W &kp B   &kp J &kp F  &kp U     &kp P   &kp SEMI &CKC_BSPC
       &kp LCTRL &kp A &kp S &kp H &kp T &kp G   &kp Y &kp N  &kp E     &kp O   &kp I    &CKC_ACCENT
       &kp LSHFT &kp Z &kp X &kp M &kp C &kp V   &kp K &kp L  &kp COMMA &kp DOT &kp FSLH &CKC_RSFT
                         &mo 1 &mo 2 &kp SPACE   &kp RET &mo 3 &mt LALT ESC >;};

    // ############################################################  SUPER ########################################################################
    super_layer { bindings = <
       &kp LGUI  &M_LOCK      &kp K_VOL_UP &kp K_VOL_DN &kp K_MUTE &I3_KILL   &I3_XKILL   &kp K_NEXT &kp K_PREV &kp K_PP       &M_PWMENU &kp RALT
       &kp LCTRL &M_WS7       &M_WS1       &M_WS2       &M_WS3       &I3_FS   &I3_WINTAB  &M_WS4     &M_WS5     &M_WS6         &M_WS8    &mt LALT ESC
       &kp LSHFT &I3_DISPLAYS &I3_RESIZE   &I3_MOVE     &I3_SPAD      &none   &I3_FLOAT   &I3_PW     &I3_NW     &I3_SCREENSHOT &I3_RESET &kp RSHFT
                                              &mo 1        &mo 2      &mo 6   &none       &mo 3      &mt LALT ESC >;};
    // ############################################################  LOWER ########################################################################
    lower_layer { bindings = <
       &kp LGUI  &kp N4       &kp N3       &kp N2       &kp N1          &kp N5         &kp N0   &kp N6   &kp N7 &kp N8    &kp N9 &kp RALT
       &bt LCTRL &CKC_EXCLAM &CKC_HASH &CKC_QUOT  &CKC_DQUOT &CKC_PERC   &CKC_PLUS &CKC_MINUS &CKC_ASTERISK &CKC_SLASH &CKC_EQUAL &mt LALT ESC
       &kp LSHFT &CKC_LESS   &CKC_MORE &CKC_O_PAR &CKC_C_PAR  &CKC_AND   &CKC_OR   &CKC_C_CUR &CKC_O_CUR    &CKC_C_BRK &CKC_O_BRK &CKC_RSFT
                                           &mo 1       &mo 2   &kp TAB   &kp TAB   &mo 3      &kp DEL >;};

    // ############################################################  RAISE ########################################################################
    raise_layer { bindings = <
       &kp LGUI  &VIM_DIT &VIM_DIP &VIM_DIS &VIM_DIW &VIM_DIB   &kp HOME    &kp END  &kp PAGE_DOWN &kp PAGE_UP &none    &none
       &kp LCTRL &VIM_CIT &VIM_CIP &VIM_CIS &VIM_CIW &VIM_CIW   &kp LEFT    &kp DOWN &kp UP        &kp RIGHT   &none    &none
       &kp LSHFT &VIM_VIT &VIM_VIP &VIM_VIS &VIM_VIW &VIM_VIB   &none       &VIM_GMD &VIM_GMU      &VIM_GTD    &VIM_GTU &CKC_RSFT
                                      &mo 1 &mo 2 &CKC_CTRLBS   &CKC_CTRLBS &mo 3    &none >;};

    // ############################################################  HYPER ########################################################################
    hyper_layer { bindings = <
      &M_WEATHER &M_CBACKUP &M_UPDATE_PACKAGES &M_ROFI_SHORTCUTS  &M_ROFI_EMOJI &M_FILEX   &M_RANGER &none  &none  &none  &M_VIM  &M_ROFI_MANUALS
       &kp LCTRL &kp F11    &M_ROFI_DOCS       &M_ROFI_ACTIVITIES &M_ROFI        &M_CALC   &none     &none  &none  &none  &kp F12 &kp GRAVE
       &kp LSHFT &kp F4     &kp F3             &kp F2             &kp F1          &kp F5   &kp F10   &kp F6 &kp F7 &kp F8 &kp F9  &CKC_RSFT
                                               &none              &mo 2            &none   &none     &none  &kp RALT >;};

    // ############################################################  ARROW ########################################################################
    arrow_layer { bindings = <
       &CKC_EXIT_ARROW &none &none    &kp UP   &none     &none   &none  &none    &kp UP   &none     &none &CKC_EXIT_ARROW
       &CKC_EXIT_ARROW &none &kp LEFT &kp DOWN &kp RIGHT &none   &none  &kp LEFT &kp DOWN &kp RIGHT &none &CKC_EXIT_ARROW
       &CKC_EXIT_ARROW &none &none    &none    &none    &kp UP   &kp UP &none    &none    &none     &none &CKC_EXIT_ARROW
                                   &kp LEFT &kp DOWN &kp RIGHT   &kp LEFT &kp DOWN &kp RIGHT >;};

    // ############################################################  CONFIG ########################################################################
    // Note: We've removed RGB controls from this layer because we don't use them anymore. Feel free to re-add them if you need them.
    config_layer { bindings = <
       &none &none        &none        &none        &none        &none          &none &none   &none       &none &none &none
       &none &bt BT_SEL 3 &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &bt BT_SEL 4   &none &M_HELP &M_VIM_HELP &none &none &none
       &none &none        &none        &none        &bt BT_CLR   &none          &none &none   &none       &none &none &none
                                                            &none &none &none   &none &none &none >;};

  };// END KEYMAPS


  // START MACROS
  // #########################################################################
  macros {

    // SUPER LAYER MACROS
    // -----------------------------------------------------------------------

    ZMK_MACRO(I3_WINTAB, // SWAYR LIST ALL TILES
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_KILL, // I3 CLOSE TILE
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_XKILL, // SWAYR KILL -9 TILE
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_PW, // IDK
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_NW, // IDK
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_RESET, // RESETS I3
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_FLOAT, // TOGGLES FLOAT MODE FOR THE SELECTED TILE
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )

    // LOWER LAYER MACROS 
    // -----------------------------------------------------------------------
    ZMK_MACRO(CKC_ACCENT, // ´ and `
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_HASH, // #
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_QUOT, // ' and · (bullet)
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_DQUOT, // " and ¨ (dieresis)
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_QMA, // ? and ¿
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_EXCLAM, // ! and ¡
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_PERC, // % and ¬
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_PLUS, // +
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_MINUS, // - and _
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_ASTERISK, // * and ^
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_SLASH, // '/' and '\'
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_EQUAL, // =
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_LESS, // < and ←
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_MORE, // > and →
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_O_PAR, // ( and €
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_C_PAR, // ) and $
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_AND, // & and ª
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_OR, // || and º
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_O_CUR, // {
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_C_CUR, // }
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_O_BRK, // [
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_C_BRK, // ]
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )

    // RAISE LAYER HERE
    // ----------------------------------------------------------------------
    ZMK_MACRO(VIM_CIT, // change inner tag
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_CIP, // change inner paragraph
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_CIS, // change inner sentence
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_CIW, // change inner word
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_CIB, // change inner block of code {}
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_VIT, // visual inner tag (selection)
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_VIP, // visual inner paragraph (selection)
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_VIS, // visual inner sentence (selection)
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_VIW, // visual inner word (selection)
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_VIB, // visual inner block of code {} (selection)
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_DIT, // delete inner tag
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_DIP, // delete inner paragraph
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_DIS, // delete inner sentence
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_DIW, // delete inner word
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_DIB, // delete inner block of code {}
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_GMD, // Go method - down [m
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_GMU, // Go method - up ]m
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_GTD, // Go tag/class - down ,c1/]]
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_GTU, // Go tag/class - up ,c2/[[
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )

    // HYPER LAYER HERE
    // ----------------------------------------------------------------------
    ZMK_MACRO(M_CBACKUP, // Spawns a term → Encrypted backup to the cloud
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_UPDATE_PACKAGES, // Spawns a term → Perform system update
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_ROFI, // Spawns the application launcher
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_ROFI_SHORTCUTS, // Perform an encrypted backup to the cloud
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_ROFI_EMOJI, // Shows all emojis and copy selection to clipboard
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_CALC, // Opens calculator
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_ROFI_MANUALS, // IDK
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_ROFI_DOCS, // Open rofi-real by zeioth
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_ROFI_ACTIVITIES, // Open the activities selector
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_RANGER, // Opens ranger TUI file browser
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_FILEX, // Open GUI file browser
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_VIM, // Opens vim
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_WEATHER, // Open TUI weather
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )

    // ARROW MODE
    // ----------------------------------------------------------------------
    ZMK_MACRO(CKC_EXIT_ARROW, // Exits arrow mode
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )


  }; // END MACROS

  // TRI-LAYERS (SET LAYERS 'ON' ONLY WHILE PRESSED)
  // ----------------------------------------------------------------------
  conditional_layers {
      compatible = "zmk,conditional-layers";
      tri_layer { // HYPER
          if-layers = <1 3>;
          then-layer = <4>;
      };
      tri_layer { // CONFIG
          if-layers = <1 5>;
          then-layer = <5>;
      };
  };



}; // END KEYBOARD
