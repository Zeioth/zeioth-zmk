// Copyright (c) 2022 Zeioth (Adrian Lopez)
// License: Creative Commons 3.0


/* PERSONAL NOTES: 
 1. On vim you can enable C syntax for this file:
    :set syntax=perl 
*/


// Includes
// ---------------------------------------
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Layers
// ---------------------------------------
#define DEFAULT 0
#define SUPER   1
#define LOWER   2
#define RAISE   3
#define HYPER   4
#define CONFIG  5
#define ARROW   6
#define NONE    0


/ { // START KEYBOARD


  // START KEYMAPS
  // ##########################################################################
  keymap { 
    compatible = "zmk,keymap";

    // ############################################################  DEFAULT ########################################################################
    default_layer { bindings = <
       &kp TAB   &kp Q &kp D &kp R &kp W &kp B   &kp J &kp F  &kp U     &kp P   &kp SEMI &CKC_BSPC
       &kp LCTRL &kp A &kp S &kp H &kp T &kp G   &kp Y &kp N  &kp E     &kp O   &kp I    &CKC_ACCENT
       &kp LSHFT &kp Z &kp X &kp M &kp C &kp V   &kp K &kp L  &kp COMMA &kp DOT &kp FSLH &CKC_RSFT
                      &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &mt RALT F >;};

    // ############################################################  SUPER ########################################################################
    super_layer { bindings = <
       &kp LGUI  &M_LOCK       &kp K_VOL_UP &kp K_VOL_DN  &kp K_MUTE  &I3_KILL       &I3_XKILL &kp K_NEXT   &kp K_PREV &kp K_PP &M_PWMENU &kp RALT
       &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
       &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                                        &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT >;};
    /* super_layer { */
    /* bindings = < */
    /*    &kp LGUI  &M_LOCK      &kp K_AUDIO_VOL_DOWN &kp K_AUDIO_VOL_UP &kp K_MUTE &I3_KILL   &I3_XKILL  &kp K_NEXT &kp K_PREV &M_PWMENU      &kp C_PAUSE &kp RALT */
    /*    &bt LCTRL &M_WS7       &M_WS1               &M_WS2             &M_WS3       &I3_FS   &I3_WINTAB &M_WS4     &M_WS5     &M_WS6         &M_WS8      &kp NO */
    /*    &kp LSHFT &I3_DISPLAYS &I3_RESIZE           &I3_MOVE           &I3_SPAD    &I3_LYM   &I3_FLOAT  &I3_PW     &I3_NW     &I3_SCREENSHOT &I3_RESET   &kp RSHFT */
    /*                                                             &kp LGUI &trans &kp SPACE   &kp RET  &trans   &kp RALT */ 
    /* >;}; */

    // ############################################################  LOWER ########################################################################
    lower_layer { bindings = <
       &kp TAB    &kp N1       &kp N2       &kp N3       &kp N4       &kp N5         &kp N6   &kp N7   &kp N8 &kp N9    &kp N0 &kp BSPC
       &bt BT_CLR &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &kp LEFT &kp DOWN &kp UP &kp RIGHT &trans &trans
       &kp LSHFT  &trans       &trans       &trans       &trans       &trans         &trans   &trans   &trans &trans    &trans &trans
                                        &kp LGUI     &trans       &kp SPACE      &kp RET  &trans   &kp RALT >;};

    // ############################################################  RAISE ########################################################################
    raise_layer { bindings = <
       &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
       &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
       &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                               &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT >;};

    // ############################################################  HYPER ########################################################################
    hyper_layer { bindings = <
       &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
       &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
       &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                               &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT >;};

    // ############################################################  ARROW ########################################################################
    arrow_layer { bindings = <
       &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
       &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
       &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                               &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT >;};

    // ############################################################  CONFIG ########################################################################
    config_layer { bindings = <
       &kp  TAB  &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR &kp RPAR &kp BSPC
       &kp LCTRL &trans   &trans &trans   &trans   &trans      &kp MINUS &kp EQUAL &kp LBKT        &kp RBKT &kp BSLH &kp GRAVE
       &kp LSHFT &trans   &trans &trans   &trans   &trans      &kp UNDER &kp PLUS  &kp LBRC        &kp RBRC &kp PIPE &kp TILDE
                               &kp LGUI &trans   &kp SPACE   &kp RET   &trans    &kp RALT >;};

  };// END KEYMAPS


  // START MACROS
  // #########################################################################
  macros {

    // BASE LAYER MACROS 
    // -----------------------------------------------------------------------
    ZMK_MACRO(CKC_CTRLBS, // CTRL + BACKSPACE
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_BSPC, // BACKSPACE AND DEL
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_RLOCK, // RAISE LOCK and ARROW MODE (Currently disabled)
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_RSFT, // RSHIFT and ARROW MODE (bug RShift doesn't work)
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )


    // SUPER LAYER MACROS
    // -----------------------------------------------------------------------

    ZMK_MACRO(M_WS1, // WORKSPACE 1
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_WS2, // WORKSPACE 2
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_WS3, // WORKSPACE 3
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_WS4, // WORKSPACE 4
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_WS5, // WORKSPACE 5
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_WS6, // WORKSPACE 6
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_WS7, // WORKSPACE 7
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_WS8, // WORKSPACE 8
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(F_WL, // IDK
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(F_WD, // IDK
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(F_WU, // IDK
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(F_WR, // IDK
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_LOCK, // IDK
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(F_PWMENU, // IDK
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_LYM, // LAYOUT MANAGER (Currently disabled)
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_HELP, // OPEN USAGE INSTRUCTIONS FOR THIS FIRMWARE.
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_VIM_HELP, // OPEN USAGE INSTRUCTIONS FOR OUT VIM CONFIG.
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_FS, // IDK
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_DISPLAYS, // MODE: DISPLAYS
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_SCREENSHOT, // MODE: SCREENSHOTS
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_RESIZE, // MODE: RESIZE TILE SIZE
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_MOVE, // MODE: MOVE TILE
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_SPAD, // IDK
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_WINTAB, // SWAYR LIST ALL TILES
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_KILL, // I3 CLOSE TILE
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_XKILL, // SWAYR KILL -9 TILE
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_PW, // IDK
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_NW, // IDK
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_RESET, // RESETS I3
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(I3_FLOAT, // TOGGLES FLOAT MODE FOR THE SELECTED TILE
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )

    // LOWER LAYER MACROS 
    // -----------------------------------------------------------------------
    ZMK_MACRO(CKC_ACCENT, // ´ and `
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_HASH, // #
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_QUOT, // ' and · (bullet)
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_DQUOT, // " and ¨ (dieresis)
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_QMA, // ? and ¿
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_EXCLAM, // ! and ¡
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_PERC, // % and ¬
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_PLUS, // +
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_MINUS, // - and _
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_ASTERISK, // * and ^
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_SLASH, // '/' and '\'
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_EQUAL, // =
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_LESS, // < and ←
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_MORE, // > and →
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_O_PAR, // ( and €
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_C_PAR, // ) and $
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_C_AND, // & and ª
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_C_OR, // || and º
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_O_CUR, // {
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_C_CUR, // }
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_O_BRK, // [
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(CKC_C_BRK, // ]
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )

    // RAISE LAYER HERE
    // ----------------------------------------------------------------------
    ZMK_MACRO(VIM_CIT, // change inner tag
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_CIP, // change inner paragraph
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_CIS, // change inner sentence
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_CIW, // change inner word
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_CIB, // change inner block of code {}
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_VIT, // visual inner tag (selection)
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_VIP, // visual inner paragraph (selection)
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_VIS, // visual inner sentence (selection)
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_VIW, // visual inner word (selection)
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_VIB, // visual inner block of code {} (selection)
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_DIT, // delete inner tag
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_DIP, // delete inner paragraph
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_DIS, // delete inner sentence
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_DIW, // delete inner word
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_DIB, // delete inner block of code {}
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_GDM, // Go method - down [m
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_GDU, // Go method - up ]m
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_GTD, // Go tag/class - down ,c1/]]
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(VIM_GTU, // Go tag/class - up ,c2/[[
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )

    // HYPER LAYER HERE
    // ----------------------------------------------------------------------
    ZMK_MACRO(M_CBACKUP, // Spawns a term → Encrypted backup to the cloud
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_UPDATE_PACKAGES, // Spawns a term → Perform system update
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_ROFI, // Spawns the application launcher
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_ROFI_SHORTCUTS, // Perform an encrypted backup to the cloud
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_ROFI_EMOJI, // Shows all emojis and copy selection to clipboard
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_CALC, // Opens calculator
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_ROFI_MANUALS, // IDK
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_ROFI_DOCS, // Open rofi-real by zeioth
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_ROFI_ACTIVITIES, // Open the activities selector
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_RANGER, // Opens ranger TUI file browser
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_FILEX, // Open GUI file browser
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_VIM, // Opens vim
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )
    ZMK_MACRO(M_WEATHER, // Open TUI weather
      wait-ms = <30>;
      tap-ms = <40>;
      bindings
          = <&macro_press &kp LSHFT>
          , <&macro_tap &kp Z &kp M &kp K>
          , <&macro_release &kp LSHFT>
          ;
    )

    // SET LAYERS 'ON' ONLY WHILE PRESSED
    // ----------------------------------------------------------------------
    // BASE
    // LOWER
    // RAISE
    // ADJUST
    // SUPER

    // SPECIAL LAYERS 
    // ----------------------------------------------------------------------
    // ARROW MODE


  }; // END MACROS


}; // END KEYBOARD
